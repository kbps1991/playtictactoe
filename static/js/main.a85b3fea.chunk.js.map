{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","this","value","React","Component","Board","state","squares","Array","fill","xIsNext","i","clickedSquare","slice","calculateWinner","setState","lines","length","a","b","c","winner","handleReset","handleClick","Game","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a85b3fea.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class Square extends React.Component {\n    constructor(props) {\n      super();\n    }\n    render() {\n      return (\n        <div className=\"square\" onClick={this.props.onClick}>\n          {this.props.value}\n        </div>\n      );\n    }\n  }\n","import React from 'react';\nimport Square from './Square'\nimport './App.css';\n\nexport default class Board extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        squares: Array(9).fill(null),\n        xIsNext: true\n      };\n    }\n  \n    handleClick(i) {\n      const { squares, xIsNext } = this.state;\n      const clickedSquare = squares.slice();\n      if (this.calculateWinner(squares) || clickedSquare[i]) {\n        return;\n      }\n      clickedSquare[i] = xIsNext ? \"X\" : \"O\";\n      this.setState({ squares: clickedSquare, xIsNext: !xIsNext });\n    }\n  \n    handleReset() {\n      this.setState({ squares: Array(9).fill(null), xIsNext: true });\n    }\n\n    calculateWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6]\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }\n  \n    render() {\n      const { squares, xIsNext } = this.state;\n      const winner = this.calculateWinner(squares);  \n      return (\n        <div  className=\"container\">\n          <div className=\"instructions\">\n            Next player: {xIsNext ? \"X\" : \"O\"}\n          </div>\n          <div className=\"instructions\">\n            Winner:{winner ? winner : \"None\"}\n          </div>\n          <button className=\"reset-button\" onClick={() => this.handleReset()}>\n            Reset\n          </button>\n          <div className=\"board\">\n            <div className=\"board-row\">\n              <Square value={squares[0]} onClick={() => this.handleClick(0)} />\n              <Square value={squares[1]} onClick={() => this.handleClick(1)} />\n              <Square value={squares[2]} onClick={() => this.handleClick(2)} />\n            </div>\n            <div className=\"board-row\">\n              <Square value={squares[3]} onClick={() => this.handleClick(3)} />\n              <Square value={squares[4]} onClick={() => this.handleClick(4)} />\n              <Square value={squares[5]} onClick={() => this.handleClick(5)} />\n            </div>\n            <div className=\"board-row\">\n              <Square value={squares[6]} onClick={() => this.handleClick(6)} />\n              <Square value={squares[7]} onClick={() => this.handleClick(7)} />\n              <Square value={squares[8]} onClick={() => this.handleClick(8)} />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n","import React from 'react';\nimport './App.css';\nimport Board from './Board'\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}